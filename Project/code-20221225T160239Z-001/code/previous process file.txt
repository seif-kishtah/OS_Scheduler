#include "headers.h"

/* Modify this file as needed*/
void myhandler1(int);
void myhandler2(int);
int remainingtime;
int finishtime;
key_t remaining;
int mid;
int *shmaddr;

int main(int argc,char*argv[]) //savedremaining is equal to bursttime at first then it will be the remaining time when state saved
{
    remaining = ftok("lab.txt",2);
    mid = shmget(remaining, 4, IPC_CREAT | 0644);
    printf("the process remaining time  is %d\n",atoi(argv[0]));
    shmaddr = (int *)shmat(mid, (void *)1, 0);
    signal(SIGUSR1,myhandler1);
    signal(SIGUSR2,myhandler2);
    initClk(); //to be able to read the shared memory(clock)
    remainingtime=atoi(argv[0]);

    //TODO The process needs to get the remaining time from somewhere
    //remainingtime = ??;
    int x;
    *shmaddr = remainingtime;
    while (remainingtime > 0)
    {
        x=getClk(); //get current time
        while(x==getClk()){
        } //busy wait till time is incremented one
        printf("the current time is %d\n",x);
        remainingtime=remainingtime-1; //Here we're sure that time is incremented
        *shmaddr = remainingtime;

    }
    
    finishtime=x+1;
    destroyClk(false);
    printf("i terminated with remaining time = %d\n",(*shmaddr));
    return 0;
}

int currentstate(){   //this function will be used to save the current state 
    return remainingtime;
}

int finish_time(){
    return finishtime;
}

void myhandler1(int signum){
    *shmaddr = getClk();
}
void myhandler2(int signum){
    
}
